%{
#include <stdio.h>
#include <string.h>
%}

%%  /* Start of Rules */


Meeting               { printf("%d_tSTARTMEETING\n", yylineno); }
endMeeting            { printf("%d_tENDMEETING\n", yylineno); }
subMeetings           { printf("%d_tSTARTSUBMEETINGS\n", yylineno); }
endSubMeetings        { printf("%d_tENDSUBMEETINGS\n", yylineno); }
meetingNumber         { printf("%d_tMEETINGNUMBER\n", yylineno); }
description           { printf("%d_tDESCRIPTION\n", yylineno); }
startDate             { printf("%d_tSTARTDATE\n", yylineno); }
endDate               { printf("%d_tENDDATE\n", yylineno); }
startTime             { printf("%d_tSTARTTIME\n", yylineno); }
endTime               { printf("%d_tENDTIME\n", yylineno); }
locations             { printf("%d_tLOCATIONS\n", yylineno); }
isRecurring           { printf("%d_tISRECURRING\n", yylineno); }
frequency             { printf("%d_tFREQUENCY\n", yylineno); }
repetitionCount       { printf("%d_tREPETITIONCOUNT\n", yylineno); }

daily                 { printf("%d_tDAILY\n", yylineno); }
weekly                { printf("%d_tWEEKLY\n", yylineno); }
monthly              { printf("%d_tMONTHLY\n", yylineno); }
yearly               { printf("%d_tYEARLY\n", yylineno); }


yes                   { printf("%d_tYES\n", yylineno); }
no                    { printf("%d_tNO\n", yylineno); }


"="                   { printf("%d_tASSIGN\n", yylineno); }
","                   { printf("%d_tCOMMA\n", yylineno); }


[a-zA-Z][a-zA-Z0-9_]* { printf("%d_tIDENTIFIER_(%s)\n", yylineno, yytext); }
[0-9]+                { printf("%d_tINTEGER_(%s)\n", yylineno, yytext); }
[0-9]{2}\.[0-9]{2}\.[0-9]{4} { printf("%d_tDATE_(%s)\n", yylineno, yytext); }
[0-9]{2}\.[0-9]{2}    { printf("%d_tTIME_(%s)\n", yylineno, yytext); }
\"[^\"]*\"            { printf("%d_tSTRING_(%s)\n", yylineno, yytext); }


"//".*                { /* Ignore single-line comments */ }


"/*" { 
    int nested = 1;
    while (nested > 0) {
        int c = input();
        if (c == EOF) break;
        if (c == '*') {
            if (input() == '/') nested--;
        } else if (c == '/') {
            if (input() == '*') nested++;
        } else if (c == '\n') {
            yylineno++;  /* Correctly increment line number */
        }
    }
}


"\n" { yylineno++; }


[ \t\r]+ { /* Ignore spaces, tabs, and carriage returns */ }


. {
    // Exclude valid characters from illegal character output
    if (strcmp(yytext, ")") != 0 && strcmp(yytext, "(") != 0 &&
        strcmp(yytext, "\n") != 0 && strcmp(yytext, " ") != 0 &&
        strcmp(yytext, "\t") != 0 && strcmp(yytext, "\r") != 0) {
        printf("%d_ILLEGAL_CHARACTER_(%s)\n", yylineno, yytext);
    }
}

%%  /* End of Rules */


int main() {
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}
